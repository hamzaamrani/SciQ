stages:
  - build
  - test
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DEV_ENV_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH/env/test-env:latest
  DOCKER_ANDROID_ENV_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH/env/android-env:latest
  DOCKER_DRIVER: overlay2
  ANDROID_COMPILE_SDK: "29"
  ANDROID_BUILD_TOOLS: "29.0.2"
  ANDROID_SDK_TOOLS:   "6514223"

# BUILD STAGE

build-android-env:
  stage: build
  image: docker
  before_script:
    - echo $CI_DEPLOY_PASSWORD | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin
  services:
      - docker:dind
  script:
    - docker pull $DOCKER_ANDROID_ENV_IMAGE || true
    - docker build --cache-from $DOCKER_ANDROID_ENV_IMAGE -t $DOCKER_ANDROID_ENV_IMAGE sciq-app/
    - docker push $DOCKER_ANDROID_ENV_IMAGE
    - docker create -it --name dummy $DOCKER_ANDROID_ENV_IMAGE bash
    - docker cp dummy:/sciq-app/app/build/outputs/apk/debug/app-debug.apk $CI_PROJECT_DIR/sciq-apk
  artifacts:
    paths:
      - $CI_PROJECT_DIR/sciq-apk/app-debug.apk

build-test-env:
  stage: build
  image: docker
  before_script:
    - echo $CI_DEPLOY_PASSWORD | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin
  services:
      - docker:dind
  script:
      - docker pull $DOCKER_DEV_ENV_IMAGE || true
      - docker build --cache-from $DOCKER_DEV_ENV_IMAGE -t $DOCKER_DEV_ENV_IMAGE tests/
      - docker push $DOCKER_DEV_ENV_IMAGE
  
# TEST STAGE

test-db:
  stage: test
  image: $DOCKER_DEV_ENV_IMAGE
  script:
    - echo 'test db'
    - python3 -m unittest discover tests.db -v

test-parser:
  stage: test
  image: $DOCKER_DEV_ENV_IMAGE
  script:
    - echo 'test parser'
    - python3 -m unittest discover tests.parser -v

test-api-wolfram:
  stage: test
  image: $DOCKER_DEV_ENV_IMAGE
  script:
    - echo 'test api wolfram'
    - python3 -m unittest discover tests.api_wolfram -v

test-services:
  stage: test
  image: $DOCKER_DEV_ENV_IMAGE
  script:
    - echo 'test services'
    - python3 -m unittest discover tests.services -v

# DEPLOY STAGE

# deploy-apk:
#   stage: deploy
#   image: python:3.7
#   dependencies:
#     - build-android-env
#   script:
#     - pip3 install dropbox
#     - python3 $CI_PROJECT_DIR/web/app/services/utils/upload_apk.py $CI_PROJECT_DIR $DROPBOX_API_TOKEN

deploy-prod:
  stage: deploy
  image: ruby:latest
  dependencies:
    - build-android-env
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - apt-get install -y python3.7 python3-pip
    - gem install dpl
    - pip3 install dropbox
    - git remote set-url origin https://belerico:$GITLAB_ACCESS_TOKEN@gitlab.com/$CI_PROJECT_NAME.git
    - git config --global user.email $GITLAB_USER_EMAIL
    - git config --global user.name $GITLAB_USER_ID
  script:
    - git checkout -B $CI_COMMIT_REF_NAME
    - python3 $CI_PROJECT_DIR/web/app/services/utils/upload_apk.py $CI_PROJECT_DIR $DROPBOX_API_TOKEN
    - git add $CI_PROJECT_DIR/web/app/templates/index.html
    - git commit -m '[skip ci] commit from CI runner'
    - git push --follow-tags origin $CI_COMMIT_REF_NAME
    - dpl --provider=heroku --app=sciq-unimib --api-key=$HEROKU_SECRET_KEY
  only:
    - master

deploy-dev:
  stage: deploy
  image: ruby:latest
  dependencies:
    - build-android-env
  before_script:
      - apt-get update -qy
      - apt-get install -y ruby-dev
      - apt-get install -y python3.7 python3-pip
      - gem install dpl
      - pip3 install dropbox
  script:
    - python3 $CI_PROJECT_DIR/web/app/services/utils/upload_apk.py $CI_PROJECT_DIR $DROPBOX_API_TOKEN
    - dpl --provider=heroku --app=sciq-unimib-dev --api-key=$HEROKU_SECRET_KEY
  only:
    - sprint2